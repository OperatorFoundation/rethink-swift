{"name":"Rethink.swift","tagline":"A RethinkDB client driver for Swift","body":"Rethink.swift\r\n-------------\r\n\r\nA Swift client driver for RethinkDB.\r\n\r\n### Usage\r\n\r\n```swift\r\nlet connection = try ReConnection(url: NSURL(string: \"rethinkdb://localhost:28016\")!) {\r\n\t// Connected!\r\n\tR.dbCreate(databaseName).run(connection) { (response) in\r\n\t\tassert(!response.isError, \"Failed to create database: \\(response)\")\r\n\r\n\t\tR.db(databaseName).tableCreate(tableName).run(self.connection) { (response) in\r\n\t\t\tassert(!response.isError, \"Failed to create table: \\(response)\")\r\n\r\n\t\t\tR.db(databaseName).table(tableName).indexWait().run(self.connection) { (response) in\r\n\t\t\t\tassert(!response.isError, \"Failed to wait for index: \\(response)\")\r\n\r\n\t\t\t\t// Insert 1000 documents\r\n\t\t\t\tvar docs: [ReDocument] = []\r\n\t\t\t\tfor i in 0..<1000 {\r\n\t\t\t\t\tdocs.append([\"foo\": \"bar\", \"id\": i])\r\n\t\t\t\t}\r\n\r\n\t\t\t\tR.db(databaseName).table(tableName).insert(docs).run(self.connection) { (response) in\r\n\t\t\t\t\tXCTAssert(!response.isError, \"Failed to insert data: \\(response)\")\r\n\r\n\t\t\t\t\tR.db(databaseName).table(tableName).count().run(self.connection) { (response) in\r\n\t\t\t\t\t\t...\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Status\r\n\r\nThis is a very early version of the driver. It implements the V0_4 basic structure (based on JSON). It currently supports\r\nthe most basic commands (e.g. creation of tables, databases, ..). No extra option arguments are currently supported, and\r\nneither are expressions. Error handling needs some more love. Do not use in production code!\r\n\r\n### Installation\r\n\r\nCurrently, the code is all in a single file, so adding Rethink.swift to your project should be sufficient. There are no\r\nexternal dependencies apart from Foundation.\r\n\r\n### License\r\n\r\n```\r\nRethink.swift. Copyright (c) 2015 Pixelspark\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n\r\n### FAQ\r\n\r\n- __Can I contribute?__\r\n\r\nFeel free to send a pull request. If you want to implement a new feature, please open\r\nan issue first, especially if it's a non backward compatible one.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}